from django.db import models
from django.contrib.auth.models import User


class DoctorData(models.Model):
    doctorId = models.AutoField(primary_key=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE)


    def __str__(self):
        return f"Doctor: {self.user.username}"

# Define models for mood analysis and patient-doctor data management
class PatientData(models.Model):

    patientId = models.AutoField(primary_key=True)
    JoinedTime = models.DateTimeField(null= True , blank=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    doctor = models.ForeignKey(DoctorData, on_delete=models.CASCADE, related_name='patients_under_care', blank=True,null=True)
    description = models.TextField(null=True, blank=True)  # Add a d   escription field for patient group
    def __str__(self):
        return f"Patient: {self.user.username}"


class MoodVideo(models.Model):
    timestamp = models.DateTimeField(null= True , blank=True)
    mood = models.CharField(max_length=50)
    patient = models.ForeignKey(PatientData, on_delete=models.CASCADE, related_name="mood_video", null=True, blank=True)
    def __str__(self):
        return f"MoodVideo at {self.timestamp} - Mood: {self.mood}"


class WeablesData(models.Model):
    timestamp = models.DateTimeField()
    respiration_rate = models.FloatField()
    body_temperature = models.FloatField()
    blood_oxygen = models.FloatField()
    heart_rate = models.FloatField()
    sleeping_hours = models.FloatField()
    stress_level = models.FloatField(null=True, blank=True)
    mood_data = models.CharField(max_length=50)
    patient = models.ForeignKey(PatientData, on_delete=models.CASCADE, related_name="weables_data", null=True, blank=True)

    def __str__(self):
        return f"WeablesData at {self.timestamp}"


class ChatLog(models.Model):
    timestamp = models.DateTimeField()
    user_input = models.TextField()
    bot_response = models.TextField()
    mood = models.CharField(max_length=50)
    patient = models.ForeignKey(PatientData, on_delete=models.CASCADE, related_name="chat_logs", null=True, blank=True)
    def __str__(self):
        return f"ChatLog at {self.timestamp} - Mood: {self.mood}"


class BecksIndex(models.Model):
    timestamp = models.DateTimeField()
    score = models.IntegerField()
    patient = models.ForeignKey(PatientData, on_delete=models.CASCADE, related_name="becks_index", null=True, blank=True)
    def __str__(self):
        return f"BecksIndex at {self.timestamp} - Score: {self.score}"

class Notification(models.Model):
    timestamp = models.DateTimeField()
    message = models.TextField()
    fromUser = models.ForeignKey(User, on_delete=models.CASCADE, related_name="notifications", null=True, blank=True)
    toUser = models.ForeignKey(User, on_delete=models.CASCADE, related_name="notifications", null=True, blank=True)
    read = models.BooleanField(default=False)
    def __str__(self):
        """
        Return a human-readable string representation of the notification object.

        The string representation is in the format:
        "Notification at <timestamp> - Message: <message>"

        :return: A human-readable string representation of the notification object.
        """
        return f"Notification at {self.timestamp} - Message: {self.message}"
